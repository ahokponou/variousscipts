#!/bin/bash
# linux-install-docker
#
# Perform docker and docker compose installation on debian-based linux distribution
#
# @package ahokponou\variousscripts\linux-install-docker
# @version 1.0.0
# @author Helmut
# @license MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# VARIABLES
LOGFILE="/tmp/dockerInstall.log";

# check operating system and return an error if it is not Linux
function checkOS()
{
  if [[ $(uname) != "Linux" ]]; then
    if [[ $(uname) == "Darwin" ]]; then
      echo "$(date '+%Y-%M-%d %H:%M:%S') | Our script does not support the installation of Docker on your current operating system ($(sw_vers -productName) $(sw_vers -productVersion)). Please refer to https://docs.docker.com/ for manual installation.";
    else
      echo "$(date '+%Y-%M-%d %H:%M:%S') | Our script does not support the installation of Docker on your current operating system. Please refer to https://docs.docker.com/ for manual installation.";
    fi
    exit 1;
  fi
}

# GATHER OPERATING SYSTEM INFORMATION
function getOSInfo()
{
  ARCH=$(uname -m 2>> "$LOGFILE");
  DIST=$(awk -F= '/^ID=/{gsub(/"/, "", $2); print $2}' /etc/os-release 2>> "$LOGFILE");
  RELEASE=$(lsb_release -cs 2>> "$LOGFILE");
  CHANNEL="stable";
}

function printError()
{
  echo -e "Something spent wrong. See $LOGFILE for more information.";
  exit 1;
}

function dockerInstall()
{
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Update repository [...]";
  if ! sudo apt-get update | sudo sh -c 'cat >> "$LOGFILE"' 2>> "$LOGFILE" ; then
    printError;
  fi
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Update repository [DONE]";

  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Install package to allow apt over HTTPS [...]";
  sudo apt-get install -y ca-certificates curl gnupg lsb-release;
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Install package to allow apt over HTTPS [DONE]";

  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Add Docker’s official GPG key [...]";
  sudo mkdir -p /etc/apt/keyrings 2>> "$LOGFILE";
  curl -fsSL https://download.docker.com/linux/"$DIST"/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg;
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Add Docker’s official GPG key [DONE]";

  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Set up repository [...]";
  echo "deb [arch=$ARCH signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$DIST $RELEASE $CHANNEL" | sudo tee /etc/apt/sources.list.d/docker.list;
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Set up repository [DONE]";

  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Update repository [...]";
  if ! sudo apt-get update | sudo sh -c 'cat >> "$LOGFILE"' 2>> "$LOGFILE" ; then
    printError;
  fi
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Update repository [DONE]";

  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Install Docker Engine and Docker Compose [...]";
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin;
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Install Docker Engine and Docker Compose [DONE]";

  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Verify that Docker Engine and Docker Compose is installed correctly [...]";
  sudo docker version;
  sudo docker compose version;
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Verify that Docker Engine and Docker Compose is installed correctly [DONE]";

  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Clean up docker [...]";
  sudo docker system prune -a --force;
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Clean up docker [DONE]";

  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Make docker command available to non-root user [...]";
  sudo groupadd docker;
  sudo usermod -aG docker "$USER" | sudo sh -c 'cat >> "$LOGFILE"' 2>> "$LOGFILE";
  newgrp docker;
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Make docker command available to non-root user [DONE]";

  echo -e "Info: Log out and log in back so that your group membership is re-evaluated. If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.";
}

function main()
{
  checkOS;
  getOSInfo;
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Docker Installation [BEGIN]";
  dockerInstall;
  echo -e "$(date '+%Y-%M-%d %H:%M:%S') | Docker Installation [ENDED]\nSee $LOGFILE for complete installation log.";
}

main;